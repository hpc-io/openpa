# -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil ; -*-
#  
#  (C) 2008 by Argonne National Laboratory.
#      See COPYRIGHT in top-level directory.
# 

# FIXME what do we do about windows?  Do we require autotools?  MPICH2 doesn't
# currently require this...

AC_PREREQ(2.62)

AC_INIT([OpenPA], [0.0.1], [https://trac.mcs.anl.gov/projects/openpa/newticket])
AM_INIT_AUTOMAKE([-Wall -Werror foreign])

# FIXME this header needs to end up in the installation include directory in some form,
# so we probably need to change its name to something that won't collide in the
# global namespace. [goodell@ 2009-02-19]
AC_CONFIG_HEADER([src/opa_config.h])
AH_TOP([/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil ; -*- */
/*  
 *  (C) 2008 by Argonne National Laboratory.
 *      See COPYRIGHT in top-level directory.
 */
#ifndef OPA_CONIG_H_INCLUDED
#define OPA_CONIG_H_INCLUDED
])
AH_BOTTOM([#endif /* OPA_CONIG_H_INCLUDED */])

AC_PROG_CC
AC_PROG_RANLIB

AC_HEADER_ASSERT
# do we need intrin.h in here since it's a windows file?
AC_CHECK_HEADERS([pthread.h atomic.h intrin.h inttypes.h stdint.h])

AC_C_RESTRICT
AC_C_INLINE

dnl is set to 1 by the macro below if any test ever succeeds
non_emulated_primitives_available=0
dnl OPA_TRY_PRIMITIVE_HEADER([header file from src/ dir], [HAVE_ macro suffix], [feature description])
dnl FIXME should probably change this to do an AC_TRY_RUN with the existing code
dnl used as a fallback when cross-compiling.  This will provide us with a
dnl stronger guaranted that the code really works on the given platform.
AC_DEFUN([OPA_TRY_PRIMITIVE_HEADER],[
AC_MSG_CHECKING([for support for $3])
SAVE_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS -I${srcdir}/src"
AC_LINK_IFELSE([AC_LANG_PROGRAM([[
    #include "$1"
]],[[
    OPA_int_t a, b;
    int c;
    OPA_store(&a, 0);
    OPA_store(&b, 1);
    OPA_add(&a, 10);
    c = OPA_cas_int(&a, 10, 11);
    c = OPA_swap_int(&a, OPA_load(&b));
 ]])]
,AC_DEFINE(HAVE_$2, 1, [define to 1 if we have support for $3])
non_emulated_primitives_available=1
AC_MSG_RESULT([yes]),
AC_MSG_RESULT([no]))
CFLAGS="$SAVE_CFLAGS"
])

dnl We currently test for support of each platform or implementation by
dnl attempting to compile the associated primitives header file.  This doesn't
dnl feel right, but it's actually pretty effective while being fairly easy to
dnl implement as well.  The biggest problem with this strategy is that if we are
dnl missing some little bit of compatibility code (a missing type or header for
dnl which we have a workaround) we could end up selecting the wrong
dnl implementation.
dnl
dnl The HAVE_GCC_* tests all require either real gcc or the Intel compiler with
dnl the name "icc" for now to make sure that we don't get a compiler that
dnl supports "asm()" but uses a different style of arguments than gcc.  It is
dnl probably safe to drop the test for the particular compiler in the future,
dnl but we should do so only after considering the full ramifications.
if test "$GCC" = "yes" -o "$ac_cv_prog_CC" = "icc" ; then
    OPA_TRY_PRIMITIVE_HEADER([primitives/opa_gcc_intel_32_64.h], [GCC_X86_32_64], [gcc x86/x86_64 bit primitives])
    OPA_TRY_PRIMITIVE_HEADER([primitives/opa_gcc_ia64.h], [GCC_AND_IA64_ASM], [gcc ia64 primitives])
    OPA_TRY_PRIMITIVE_HEADER([primitives/opa_gcc_intrinsics.h], [GCC_INTRINSIC_ATOMICS], [gcc atomic intrinsic])
    OPA_TRY_PRIMITIVE_HEADER([primitives/opa_gcc_ppc.h], [GCC_AND_POWERPC_ASM], [gcc PowerPC atomics])
    OPA_TRY_PRIMITIVE_HEADER([primitives/opa_gcc_sicortex.h], [GCC_AND_SICORTEX_ASM], [gcc SiCortex atomics])
fi
OPA_TRY_PRIMITIVE_HEADER([primitives/opa_nt_intrinsics.h], [NT_INTRINSICS], [Windows NT atomic intrinsics])
OPA_TRY_PRIMITIVE_HEADER([primitives/opa_sun_atomic_ops.h], [SUN_ATOMIC_OPS], [Sun's atomic operations library])

if test "$non_emulated_primitives_available" = "0" ; then
    AC_MSG_WARN([
=======================================================================
  No native atomic primitives were detected.  OpenPA will use locks to
  emulate atomic behavior.  This will almost certainly result in very
  poor performance.  Please make sure that this is expected behavior!
=======================================================================])
fi

AC_CONFIG_FILES([Makefile src/Makefile test/Makefile])
AC_OUTPUT

